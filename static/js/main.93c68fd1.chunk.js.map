{"version":3,"sources":["VRControl.js","initializer.js","asset_loader.js","App.js","reportWebVitals.js","index.js"],"names":["generateRayTexture","canvas","document","createElement","width","height","ctx","getContext","gradient","createLinearGradient","addColorStop","fillStyle","fillRect","generatePointerTexture","beginPath","arc","Math","PI","lineWidth","stroke","fill","render","wheels","grid","renderer","scene","camera","stats","time","performance","now","i","length","rotation","x","position","z","update","init","controls","model_location","scale","vrControl","dolly","isMoving","isCustomizable","THREE_PATH","THREE","container","getElementById","antialias","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","setAnimationLoop","outputEncoding","toneMapping","toneMappingExposure","xr","enabled","appendChild","domElement","addEventListener","aspect","updateProjectionMatrix","onWindowResize","Stats","dom","set","OrbitControls","target","pmremGenerator","background","environment","fromScene","RoomEnvironment","texture","material","opacity","depthWrite","transparent","add","shadow","load","dracoLoader","DRACOLoader","setDecoderPath","loader","GLTFLoader","setDRACOLoader","bodyMaterial","MeshPhysicalMaterial","color","metalness","roughness","clearcoat","clearcoatRoughness","detailsMaterial","MeshStandardMaterial","glassMaterial","transmission","this","value","gltf","carModel","children","getObjectByName","push","mesh","Mesh","PlaneGeometry","MeshBasicMaterial","map","blending","MultiplyBlending","toneMapped","renderOrder","xhr","console","log","loaded","total","error","asset_loader","body","VRButton","createButton","controllers","controllerGrips","controllerModelFactory","XRControllerModelFactory","alphaMap","geometry","translate","uvAttribute","attributes","uv","count","u","getX","v","getY","setXY","linesHelper","Infinity","spriteMaterial","sizeAttenuation","depthTest","pointer","controller1","getController","controller2","name","controllerGrip1","getControllerGrip","controllerGrip2","forEach","controller","ray","clone","point","controllerGrip","createControllerModel","dummyMatrix","setFromController","controllerID","identity","extractRotation","matrixWorld","origin","setFromMatrixPosition","direction","applyMatrix4","setPointerAt","vec","localVec","worldToLocal","copy","visible","VRControl","setInterval","getWorldDirection","multiplyScalar","moveCamera","animate","App","form_options","option_to_model","scale_mapper","customizable","default_model","useState","modelName","setModelName","useEffect","innerHTML","includes","bodyColor","setbodyColor","detailsColor","setDetailsColor","glassColor","setGlassColor","className","onChange","event","val","align","id","type","preventDefault","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.93c68fd1.chunk.js","sourcesContent":["/*\r\n\tJob: creating the VR controllers and their pointers\r\n*/\r\n\r\nimport * as THREE from 'three';\r\n\r\nimport { XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory';\r\nexport default function VRControl(renderer, camera, scene) {\r\n    const controllers = [];\r\n    const controllerGrips = [];\r\n\r\n    const controllerModelFactory = new XRControllerModelFactory();\r\n\r\n    //////////////////\r\n    // Lines helpers\r\n    //////////////////\r\n\r\n    const material = new THREE.MeshBasicMaterial({\r\n        color: 0xffffff,\r\n        alphaMap: new THREE.CanvasTexture(generateRayTexture()),\r\n        transparent: true,\r\n    });\r\n\r\n    const geometry = new THREE.BoxBufferGeometry(0.004, 0.004, 0.35);\r\n\r\n    geometry.translate(0, 0, -0.15);\r\n\r\n    const uvAttribute = geometry.attributes.uv;\r\n\r\n    for (var i = 0; i < uvAttribute.count; i++) {\r\n        var u = uvAttribute.getX(i);\r\n        var v = uvAttribute.getY(i);\r\n\r\n        [u, v] = (() => {\r\n            switch (i) {\r\n                case 0:\r\n                    return [1, 1];\r\n                case 1:\r\n                    return [0, 0];\r\n                case 2:\r\n                    return [1, 1];\r\n                case 3:\r\n                    return [0, 0];\r\n                case 4:\r\n                    return [0, 0];\r\n                case 5:\r\n                    return [1, 1];\r\n                case 6:\r\n                    return [0, 0];\r\n                case 7:\r\n                    return [1, 1];\r\n                case 8:\r\n                    return [0, 0];\r\n                case 9:\r\n                    return [0, 0];\r\n                case 10:\r\n                    return [1, 1];\r\n                case 11:\r\n                    return [1, 1];\r\n                case 12:\r\n                    return [1, 1];\r\n                case 13:\r\n                    return [1, 1];\r\n                case 14:\r\n                    return [0, 0];\r\n                case 15:\r\n                    return [0, 0];\r\n                default:\r\n                    return [0, 0];\r\n            }\r\n        })();\r\n\r\n        uvAttribute.setXY(i, u, v);\r\n    }\r\n\r\n    const linesHelper = new THREE.Mesh(geometry, material);\r\n    linesHelper.renderOrder = Infinity;\r\n\r\n    /////////////////\r\n    // Point helper\r\n    /////////////////\r\n\r\n    const spriteMaterial = new THREE.SpriteMaterial({\r\n        map: new THREE.CanvasTexture(generatePointerTexture()),\r\n        sizeAttenuation: false,\r\n        depthTest: false,\r\n    });\r\n\r\n    const pointer = new THREE.Sprite(spriteMaterial);\r\n\r\n    pointer.scale.set(0.015, 0.015, 1);\r\n    pointer.renderOrder = Infinity;\r\n\r\n    ////////////////\r\n    // Controllers\r\n    ////////////////\r\n\r\n    const controller1 = renderer.xr.getController(0);\r\n    const controller2 = renderer.xr.getController(1);\r\n\r\n    controller1.name = 'controller-right';\r\n    controller2.name = 'controller-left';\r\n\r\n    const controllerGrip1 = renderer.xr.getControllerGrip(0);\r\n    const controllerGrip2 = renderer.xr.getControllerGrip(1);\r\n\r\n    if (controller1) controllers.push(controller1);\r\n    if (controller2) controllers.push(controller2);\r\n\r\n    if (controllerGrip1) controllerGrips.push(controllerGrip1);\r\n    if (controllerGrip2) controllerGrips.push(controllerGrip2);\r\n\r\n    controllers.forEach((controller) => {\r\n        const ray = linesHelper.clone();\r\n        const point = pointer.clone();\r\n\r\n        controller.add(ray, point);\r\n        controller.ray = ray;\r\n        controller.point = point;\r\n    });\r\n\r\n    controllerGrips.forEach((controllerGrip) => {\r\n        controllerGrip.add(\r\n            controllerModelFactory.createControllerModel(controllerGrip)\r\n        );\r\n    });\r\n\r\n    //////////////\r\n    // Functions\r\n    //////////////\r\n\r\n    const dummyMatrix = new THREE.Matrix4();\r\n\r\n    // Set the passed ray to match the given controller pointing direction\r\n\r\n    function setFromController(controllerID, ray) {\r\n        const controller = controllers[controllerID];\r\n\r\n        // Position the intersection ray\r\n\r\n        dummyMatrix.identity().extractRotation(controller.matrixWorld);\r\n\r\n        ray.origin.setFromMatrixPosition(controller.matrixWorld);\r\n        ray.direction.set(0, 0, -1).applyMatrix4(dummyMatrix);\r\n    }\r\n\r\n    // Position the chosen controller's pointer at the given point in space.\r\n    // Should be called after raycaster.intersectObject() found an intersection point.\r\n\r\n    function setPointerAt(controllerID, vec) {\r\n        const controller = controllers[controllerID];\r\n        const localVec = controller.worldToLocal(vec);\r\n\r\n        controller.point.position.copy(localVec);\r\n        controller.point.visible = true;\r\n    }\r\n\r\n    //\r\n\r\n    return {\r\n        controllers,\r\n        controllerGrips,\r\n        setFromController,\r\n        setPointerAt,\r\n    };\r\n}\r\n\r\n//////////////////////////////\r\n// CANVAS TEXTURE GENERATION\r\n//////////////////////////////\r\n\r\n// Generate the texture needed to make the intersection ray fade away\r\n\r\nfunction generateRayTexture() {\r\n    var canvas = document.createElement('canvas');\r\n    canvas.width = 64;\r\n    canvas.height = 64;\r\n\r\n    var ctx = canvas.getContext('2d');\r\n\r\n    var gradient = ctx.createLinearGradient(0, 0, 64, 0);\r\n    gradient.addColorStop(0, 'black');\r\n    gradient.addColorStop(1, 'white');\r\n\r\n    ctx.fillStyle = gradient;\r\n    ctx.fillRect(0, 0, 64, 64);\r\n\r\n    return canvas;\r\n}\r\n\r\n// Generate the texture of the point helper sprite\r\n\r\nfunction generatePointerTexture() {\r\n    var canvas = document.createElement('canvas');\r\n    canvas.width = 64;\r\n    canvas.height = 64;\r\n\r\n    var ctx = canvas.getContext('2d');\r\n\r\n    ctx.beginPath();\r\n    ctx.arc(32, 32, 29, 0, 2 * Math.PI);\r\n    ctx.lineWidth = 5;\r\n    ctx.stroke();\r\n    ctx.fillStyle = 'white';\r\n    ctx.fill();\r\n\r\n    return canvas;\r\n}\r\n","import Stats from \"three/examples/jsm/libs/stats.module.js\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader.js\";\nimport { VRButton } from \"three/examples/jsm/webxr/VRButton.js\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport { RoomEnvironment } from \"three/examples/jsm/environments/RoomEnvironment.js\";\nimport asset_loader from \"./asset_loader\";\nimport * as THREE from \"three\";\nimport VRControl from \"./VRControl\";\n\nfunction onWindowResize(camera, renderer) {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n}\nfunction animate(renderer, wheels, grid, scene, camera, stats) {\n    renderer.setAnimationLoop(() => {\n        render(wheels, grid, renderer, scene, camera, stats);\n    });\n}\n\nfunction render(wheels, grid, renderer, scene, camera, stats) {\n    const time = -performance.now() / 1000;\n\n    for (let i = 0; i < wheels.length; i++) {\n        wheels[i].rotation.x = time * Math.PI;\n    }\n\n    grid.position.z = -time % 5;\n\n    renderer.render(scene, camera);\n\n    stats.update();\n}\n\nfunction moveCamera(camera, dolly, isMoving) {\n    if (!isMoving) return;\n    const direction = new THREE.Vector3();\n    camera.getWorldDirection(direction);\n    dolly.position.add(direction.multiplyScalar(0.1));\n}\nexport function init(\n    renderer,\n    camera,\n    scene,\n    controls,\n    grid,\n    wheels,\n    stats,\n    model_location,\n    scale,\n    vrControl,\n    dolly,\n    isMoving,\n    isCustomizable\n) {\n    const THREE_PATH = `https://unpkg.com/three@0.${THREE.REVISION}.x`;\n    const container = document.getElementById(\"container\");\n\n    renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setAnimationLoop(() =>\n        render(wheels, grid, renderer, scene, camera, stats)\n    );\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    renderer.toneMappingExposure = 0.85;\n    renderer.xr.enabled = true;\n    container.appendChild(renderer.domElement);\n\n    window.addEventListener(\"resize\", () => onWindowResize(camera, renderer));\n\n    stats = new Stats();\n    container.appendChild(stats.dom);\n\n    //\n\n    camera = new THREE.PerspectiveCamera(\n        40,\n        window.innerWidth / window.innerHeight,\n        0.1,\n        100\n    );\n    camera.position.set(4.25, 1.4, -4.5);\n\n    controls = new OrbitControls(camera, container);\n    controls.target.set(0, 0, 0);\n    controls.update();\n\n    const pmremGenerator = new THREE.PMREMGenerator(renderer);\n\n    scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xeeeeee);\n    scene.environment = pmremGenerator.fromScene(new RoomEnvironment()).texture;\n    // scene.fog = new THREE.Fog(0xeeeeee, 10, 50);\n\n    grid = new THREE.GridHelper(100, 40, 0x000000, 0x000000);\n    grid.material.opacity = 0.1;\n    grid.material.depthWrite = false;\n    grid.material.transparent = true;\n    scene.add(grid);\n\n    // Car\n\n    const shadow = new THREE.TextureLoader().load(\"assets/ferrari_ao.png\");\n\n    const dracoLoader = new DRACOLoader();\n    dracoLoader.setDecoderPath(`${THREE_PATH}/examples/js/libs/draco/gltf/`);\n    const loader = new GLTFLoader();\n    loader.setDRACOLoader(dracoLoader);\n    // const models = ['assets/ferrarij50.glb', 'assets/ferrari_f40.glb'];\n\n    // Load a glTF resource\n\n    asset_loader(THREE, loader, shadow, scene, scale, wheels, model_location,isCustomizable);\n\n    document.body.appendChild(VRButton.createButton(renderer));\n\n    vrControl = VRControl(renderer, camera, scene);\n\n    scene.add(vrControl.controllerGrips[0], vrControl.controllers[0]);\n\n    vrControl.controllers[0].addEventListener(\"selectstart\", () => {\n        isMoving = true;\n    });\n    vrControl.controllers[0].addEventListener(\"selectend\", () => {\n        isMoving = false;\n    });\n\n    // This helps move the camera\n    dolly = new THREE.Group();\n    dolly.position.set(0, 0, 0);\n    dolly.name = \"dolly\";\n    scene.add(dolly);\n    dolly.add(camera);\n\n    setInterval(() => moveCamera(camera, dolly, isMoving), 100);\n    animate(renderer, wheels, grid, scene, camera, stats);\n}\n","// import * as THREE from \"three\";\nexport default function asset_loader(\n    THREE,\n    loader,\n    shadow,\n    scene,\n    scale,\n    wheels,\n    model_location,\n    isCustomizable\n) {\n    // materials\n\n    const bodyMaterial = new THREE.MeshPhysicalMaterial({\n        color: 0xff0000,\n        metalness: 0.6,\n        roughness: 0.4,\n        clearcoat: 0.05,\n        clearcoatRoughness: 0.05,\n    });\n\n    const detailsMaterial = new THREE.MeshStandardMaterial({\n        color: 0xffffff,\n        metalness: 1.0,\n        roughness: 0.5,\n    });\n\n    const glassMaterial = new THREE.MeshPhysicalMaterial({\n        color: 0xffffff,\n        metalness: 0,\n        roughness: 0.1,\n        transmission: 0.9,\n        transparent: true,\n    });\n\n    if (isCustomizable) {\n        const bodyColorInput = document.getElementById(\"body-color\");\n        bodyColorInput.addEventListener(\"input\", function () {\n            bodyMaterial.color.set(this.value);\n        });\n\n        const detailsColorInput = document.getElementById(\"details-color\");\n        detailsColorInput.addEventListener(\"input\", function () {\n            detailsMaterial.color.set(this.value);\n        });\n\n        const glassColorInput = document.getElementById(\"glass-color\");\n        glassColorInput.addEventListener(\"input\", function () {\n            glassMaterial.color.set(this.value);\n        });\n    }\n    // Load a glTF resource\n    loader.load(\n        // resource URL\n        model_location,\n        // called when the resource is loaded\n        function (gltf) {\n            const carModel = gltf.scene || gltf.scene.children[0];\n            carModel.scale.set(scale[0], scale[1], scale[2]);\n            if (isCustomizable) {\n                carModel.getObjectByName(\"body\").material = bodyMaterial;\n\n                carModel.getObjectByName(\"rim_fl\").material = detailsMaterial;\n                carModel.getObjectByName(\"rim_fr\").material = detailsMaterial;\n                carModel.getObjectByName(\"rim_rr\").material = detailsMaterial;\n                carModel.getObjectByName(\"rim_rl\").material = detailsMaterial;\n                carModel.getObjectByName(\"trim\").material = detailsMaterial;\n\n                carModel.getObjectByName(\"glass\").material = glassMaterial;\n\n                wheels.push(\n                    carModel.getObjectByName(\"wheel_fl\"),\n                    carModel.getObjectByName(\"wheel_fr\"),\n                    carModel.getObjectByName(\"wheel_rl\"),\n                    carModel.getObjectByName(\"wheel_rr\")\n                );\n            }\n            const mesh = new THREE.Mesh(\n                new THREE.PlaneGeometry(0.655 * 4, 1.3 * 4),\n                new THREE.MeshBasicMaterial({\n                    map: shadow,\n                    blending: THREE.MultiplyBlending,\n                    toneMapped: false,\n                    transparent: true,\n                })\n            );\n            mesh.rotation.x = -Math.PI / 2;\n            mesh.renderOrder = 2;\n            carModel.add(mesh);\n\n            scene.add(carModel);\n        },\n        // called while loading is progressing\n        function (xhr) {\n            console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n        },\n        // called when loading has errors\n        function (error) {\n            console.log(error);\n        }\n    );\n}\n","import \"./App.css\";\n\nimport * as THREE from \"three\";\n\nimport { init } from \"./initializer\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n    let camera, scene, renderer, vrControl, dolly;\n    let isMoving = false;\n    let stats;\n    const THREE_PATH = `https://unpkg.com/three@0.${THREE.REVISION}.x`;\n\n    let grid;\n    let controls;\n    const form_options = [\"Ferrari J50\", \"Ferrari F40\", \"Ferrari 458 Italia\"];\n    const option_to_model = {\n        \"Ferrari J50\": \"assets/ferrarij50.glb\",\n        \"Ferrari F40\": \"assets/ferrari_f40.glb\",\n        \"Ferrari 458 Italia\": \"assets/ferrari.glb\",\n    };\n    const scale_mapper = {\n        \"Ferrari J50\": [0.015, 0.015, 0.015],\n        \"Ferrari F40\": [0.1, 0.1, 0.1],\n        \"Ferrari 458 Italia\": [1, 1, 1],\n    };\n    const customizable = [\n        \"Ferrari 458 Italia\"\n    ];\n    const default_model = form_options[0];\n    const [modelName, setModelName] = useState(default_model);\n\n    const wheels = [];\n    useEffect(() => {\n        console.log(\"HI\" + modelName);\n        document.getElementById(\"container\").innerHTML = \"\";\n        init(\n            renderer,\n            camera,\n            scene,\n            controls,\n            grid,\n            wheels,\n            stats,\n            option_to_model[modelName],\n            scale_mapper[modelName],\n            vrControl,\n            dolly,\n            isMoving,\n            customizable.includes(modelName)\n        );\n    }, [modelName]);\n\n    const [bodyColor, setbodyColor] = useState(\"#ff0000\");\n    const bodyColorOnChange = (event) => {\n        event.preventDefault();\n        setbodyColor(event.target.value);\n    };\n\n    const [detailsColor, setDetailsColor] = useState(\"#ffffff\");\n    const detailsColorOnChange = (event) => {\n        event.preventDefault();\n        setDetailsColor(event.target.value);\n    };\n\n    const [glassColor, setGlassColor] = useState(\"#ffffff\");\n    const glassColorOnChange = (event) => {\n        event.preventDefault();\n        setGlassColor(event.target.value);\n    };\n\n    return (\n        <div className=\"App\">\n            <label>\n                Pick your car:\n                <select\n                    value={modelName}\n                    onChange={(event) => {\n                        setModelName(event.target.value);\n                    }}\n                >\n                    {\" \"}\n                    {form_options.map((val) => (\n                        <option value={val} key={val}>\n                            {val}{\" \"}\n                        </option>\n                    ))}\n                </select>\n            </label>\n\n            <h1 align=\"center\">VR SHOWROOM</h1>\n            {(customizable.includes(modelName) ) && (\n                <div id=\"controls\">\n                    <span className=\"colorPicker\">\n                        <input\n                            id=\"body-color\"\n                            type=\"color\"\n                            onChange={bodyColorOnChange}\n                            value={bodyColor}\n                        ></input>\n                        <br />\n                        Body\n                    </span>\n                    <span className=\"colorPicker\">\n                        <input\n                            id=\"details-color\"\n                            type=\"color\"\n                            onChange={detailsColorOnChange}\n                            value={detailsColor}\n                        ></input>\n                        <br />\n                        Details\n                    </span>\n                    <span className=\"colorPicker\">\n                        <input\n                            id=\"glass-color\"\n                            type=\"color\"\n                            onChange={glassColorOnChange}\n                            value={glassColor}\n                        ></input>\n                        <br />\n                        Glass\n                    </span>\n                </div>\n            )}\n            <div id=\"container\"></div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}